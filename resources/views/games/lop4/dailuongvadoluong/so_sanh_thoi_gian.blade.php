@extends('layouts.game')

@section('title', 'So S√°nh Th·ªùi Gian')

@section('content')
<div class="container mx-auto px-4 py-8">
    <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-blue-600">So S√°nh Th·ªùi Gian üïí</h1>
        <p class="text-lg mt-2">So s√°nh c√°c kho·∫£ng th·ªùi gian kh√°c nhau</p>
    </div>

    <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-6">
        <!-- Khu v·ª±c hi·ªÉn th·ªã th·ªùi gian -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <!-- Th·ªùi gian 1 -->
            <div class="text-center p-6 bg-blue-50 rounded-xl">
                <div id="time1-display" class="text-4xl font-bold mb-4">
                    <!-- Th·ªùi gian 1 s·∫Ω ƒë∆∞·ª£c th√™m b·∫±ng JavaScript -->
                </div>
                <div id="time1-description" class="text-gray-600">
                    <!-- M√¥ t·∫£ th·ªùi gian 1 -->
                </div>
            </div>

            <!-- Th·ªùi gian 2 -->
            <div class="text-center p-6 bg-blue-50 rounded-xl">
                <div id="time2-display" class="text-4xl font-bold mb-4">
                    <!-- Th·ªùi gian 2 s·∫Ω ƒë∆∞·ª£c th√™m b·∫±ng JavaScript -->
                </div>
                <div id="time2-description" class="text-gray-600">
                    <!-- M√¥ t·∫£ th·ªùi gian 2 -->
                </div>
            </div>
        </div>

        <!-- C√¢u h·ªèi -->
        <div class="text-center mb-8">
            <p class="text-xl font-bold">Kho·∫£ng th·ªùi gian n√†o d√†i h∆°n?</p>
        </div>

        <!-- N√∫t l·ª±a ch·ªçn -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
            <button id="choice1" class="p-4 bg-white border-2 border-blue-500 rounded-lg hover:bg-blue-50 transition-colors">
                Kho·∫£ng th·ªùi gian 1
            </button>
            <button id="choice2" class="p-4 bg-white border-2 border-blue-500 rounded-lg hover:bg-blue-50 transition-colors">
                Kho·∫£ng th·ªùi gian 2
            </button>
        </div>

        <!-- N√∫t c√¢u h·ªèi m·ªõi -->
        <div class="text-center">
            <button id="next-question" 
                    class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors">
                C√¢u h·ªèi ti·∫øp theo
            </button>
        </div>

        <!-- B·∫£ng quy ƒë·ªïi -->
        <div class="mt-8 p-4 bg-blue-50 rounded-lg">
            <h3 class="font-bold mb-2">B·∫£ng quy ƒë·ªïi th·ªùi gian:</h3>
            <ul class="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                <li>1 gi·ªù = 60 ph√∫t</li>
                <li>1 ph√∫t = 60 gi√¢y</li>
                <li>1 gi·ªù = 3600 gi√¢y</li>
                <li>1 ng√†y = 24 gi·ªù</li>
                <li>1 tu·∫ßn = 7 ng√†y</li>
                <li>1 th√°ng = 30 ng√†y</li>
            </ul>
        </div>
    </div>

    <!-- Th√¥ng b√°o -->
    <div id="message" class="fixed top-4 right-4 p-4 rounded-lg text-white font-bold hidden"></div>
</div>

<style>
button.selected {
    background-color: #93C5FD;
    border-color: #2563EB;
}
button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}
</style>

@endsection

@section('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const time1Display = document.getElementById('time1-display');
    const time2Display = document.getElementById('time2-display');
    const time1Description = document.getElementById('time1-description');
    const time2Description = document.getElementById('time2-description');
    const choice1Btn = document.getElementById('choice1');
    const choice2Btn = document.getElementById('choice2');
    const nextQuestionBtn = document.getElementById('next-question');
    const messageEl = document.getElementById('message');

    let currentQuestion = null;

    // Danh s√°ch c√°c kho·∫£ng th·ªùi gian ƒë·ªÉ so s√°nh
    const timeComparisons = [
        {
            time1: { value: 2, unit: 'gi·ªù', description: '2 gi·ªù' },
            time2: { value: 90, unit: 'ph√∫t', description: '90 ph√∫t' }
        },
        {
            time1: { value: 1, unit: 'ng√†y', description: '1 ng√†y' },
            time2: { value: 20, unit: 'gi·ªù', description: '20 gi·ªù' }
        },
        {
            time1: { value: 120, unit: 'ph√∫t', description: '120 ph√∫t' },
            time2: { value: 1.5, unit: 'gi·ªù', description: '1 gi·ªù 30 ph√∫t' }
        },
        {
            time1: { value: 7, unit: 'ng√†y', description: '7 ng√†y' },
            time2: { value: 1, unit: 'tu·∫ßn', description: '1 tu·∫ßn' }
        },
        {
            time1: { value: 180, unit: 'gi√¢y', description: '180 gi√¢y' },
            time2: { value: 2, unit: 'ph√∫t', description: '2 ph√∫t' }
        },
        {
            time1: { value: 0.5, unit: 'gi·ªù', description: '30 ph√∫t' },
            time2: { value: 45, unit: 'ph√∫t', description: '45 ph√∫t' }
        }
    ];

    // Chuy·ªÉn ƒë·ªïi th·ªùi gian v·ªÅ ƒë∆°n v·ªã gi√¢y
    function convertToSeconds(time) {
        switch(time.unit) {
            case 'gi√¢y':
                return time.value;
            case 'ph√∫t':
                return time.value * 60;
            case 'gi·ªù':
                return time.value * 3600;
            case 'ng√†y':
                return time.value * 86400;
            case 'tu·∫ßn':
                return time.value * 604800;
            default:
                return 0;
        }
    }

    // T·∫°o c√¢u h·ªèi m·ªõi
    function generateQuestion() {
        currentQuestion = timeComparisons[Math.floor(Math.random() * timeComparisons.length)];
        
        time1Display.textContent = currentQuestion.time1.description;
        time2Display.textContent = currentQuestion.time2.description;
        time1Description.textContent = `Th·ªùi gian th·ª© nh·∫•t`;
        time2Description.textContent = `Th·ªùi gian th·ª© hai`;

        // Reset tr·∫°ng th√°i n√∫t
        choice1Btn.classList.remove('selected');
        choice2Btn.classList.remove('selected');
        choice1Btn.disabled = false;
        choice2Btn.disabled = false;

        messageEl.classList.add('hidden');
    }

    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi
    function checkAnswer(selectedTime, otherTime) {
        const selectedSeconds = convertToSeconds(selectedTime);
        const otherSeconds = convertToSeconds(otherTime);

        const isCorrect = selectedSeconds > otherSeconds;

        if (isCorrect) {
            showMessage('ƒê√∫ng r·ªìi! üéâ', 'bg-green-500');
        } else {
            showMessage('Ch∆∞a ƒë√∫ng, th·ª≠ l·∫°i nh√©!', 'bg-red-500');
        }

        return isCorrect;
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o
    function showMessage(text, className) {
        messageEl.textContent = text;
        messageEl.className = `fixed top-4 right-4 p-4 rounded-lg text-white font-bold ${className}`;
        messageEl.classList.remove('hidden');
        
        setTimeout(() => {
            if (!messageEl.classList.contains('hidden')) {
                messageEl.classList.add('hidden');
            }
        }, 3000);
    }

    // X·ª≠ l√Ω s·ª± ki·ªán click
    choice1Btn.addEventListener('click', function() {
        this.classList.add('selected');
        choice2Btn.classList.remove('selected');
        
        const isCorrect = checkAnswer(currentQuestion.time1, currentQuestion.time2);
        if (isCorrect) {
            choice1Btn.disabled = true;
            choice2Btn.disabled = true;
        }
    });

    choice2Btn.addEventListener('click', function() {
        this.classList.add('selected');
        choice1Btn.classList.remove('selected');
        
        const isCorrect = checkAnswer(currentQuestion.time2, currentQuestion.time1);
        if (isCorrect) {
            choice1Btn.disabled = true;
            choice2Btn.disabled = true;
        }
    });

    nextQuestionBtn.addEventListener('click', generateQuestion);

    // Kh·ªüi t·∫°o game
    generateQuestion();
});
</script>
@endsection 