@extends('layouts.game')

@section('title', 'B·∫•m Gi·ªù Chu·∫©n Kh√¥ng C·∫ßn Ch·ªânh')

@section('game_content')
<div class="container mx-auto px-4 py-8">
    <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-blue-600">B·∫•m Gi·ªù Chu·∫©n Kh√¥ng C·∫ßn Ch·ªânh ‚è≤Ô∏è</h1>
        <p class="text-lg mt-2">B·∫•m n√∫t "B·∫Øt ƒë·∫ßu" v√† sau ƒë√∫ng <span id="target-duration">10</span> gi√¢y b·∫•m "D·ª´ng"</p>
        <div class="mt-2 text-base text-gray-700">M√†n ch∆°i: <span id="level">1</span> / 5</div>
    </div>

    <div class="max-w-2xl mx-auto">
        <!-- SVG ƒê·ªìng h·ªì -->
        <div class="flex justify-center mb-8">
            <svg id="clock" width="300" height="300" viewBox="0 0 300 300">
                <!-- V√≤ng ngo√†i -->
                <circle cx="150" cy="150" r="140" stroke="#e5e7eb" stroke-width="8" fill="#fff"/>
                <!-- V·∫°ch chia -->
                <g id="ticks"></g>
                <!-- Kim gi√¢y -->
                <line id="second-hand" x1="150" y1="150" x2="150" y2="40" stroke="red" stroke-width="4" stroke-linecap="round"/>
                <!-- Ch·∫•m gi·ªØa -->
                <circle cx="150" cy="150" r="8" fill="#222"/>
            </svg>
        </div>

        <!-- ƒêi·ªÅu khi·ªÉn -->
        <div class="flex justify-center gap-4 mb-8 flex-wrap">
            <button id="start" class="bg-green-500 text-white px-8 py-3 rounded-lg text-lg font-bold hover:bg-green-600">
                B·∫Øt ƒë·∫ßu
            </button>
            <button id="stop" class="bg-red-500 text-white px-8 py-3 rounded-lg text-lg font-bold hover:bg-red-600" disabled>
                D·ª´ng
            </button>
            <button id="next-level" class="bg-blue-500 text-white px-8 py-3 rounded-lg text-lg font-bold hover:bg-blue-600 hidden">
                M√†n ti·∫øp theo
            </button>
            <button id="reset-game" class="bg-yellow-500 text-white px-8 py-3 rounded-lg text-lg font-bold hover:bg-yellow-600">
                Ch∆°i l·∫°i t·ª´ ƒë·∫ßu
            </button>
            <a href="{{ route('games.lop4.dailuongvadoluong.index') }}" class="bg-gray-500 text-white px-8 py-3 rounded-lg text-lg font-bold hover:bg-gray-600 flex items-center">
                <i class="fas fa-arrow-left mr-2"></i> Quay l·∫°i
            </a>
        </div>

        <!-- K·∫øt qu·∫£ -->
        <div id="result" class="text-center text-xl font-bold mb-8 hidden">
            <div class="mb-2">Th·ªùi gian c·ªßa b·∫°n: <span id="time-taken">0</span> gi√¢y</div>
            <div class="text-lg">ƒê·ªô l·ªách: <span id="difference">0</span> gi√¢y</div>
        </div>

        <!-- Th√†nh t√≠ch -->
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-xl font-bold mb-4 text-center">Th√†nh t√≠ch c·ªßa b·∫°n</h3>
            <div class="grid grid-cols-2 gap-4 text-center">
                <div>
                    <div class="text-sm text-gray-600">L·∫ßn ch√≠nh x√°c nh·∫•t</div>
                    <div class="text-xl font-bold text-green-600" id="best-score">-</div>
                </div>
                <div>
                    <div class="text-sm text-gray-600">S·ªë l·∫ßn th·ª≠</div>
                    <div class="text-xl font-bold" id="attempts">0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Th√¥ng b√°o -->
    <div id="message" class="fixed top-4 right-4 p-4 rounded-lg text-white font-bold hidden"></div>
</div>
@endsection

@section('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // C√°c m√†n ch∆°i v·ªõi ƒë·ªô kh√≥ tƒÉng d·∫ßn
    const levels = [
        { target: 10, allowedError: 0.5 },
        { target: 20, allowedError: 0.5 },
        { target: 30, allowedError: 0.7 },
        { target: 45, allowedError: 1 },
        { target: 60, allowedError: 1 }
    ];
    let currentLevel = parseInt(localStorage.getItem('precisionTimingLevel') || '0');
    const totalLevels = levels.length;

    const startBtn = document.getElementById('start');
    const stopBtn = document.getElementById('stop');
    const nextLevelBtn = document.getElementById('next-level');
    const resetGameBtn = document.getElementById('reset-game');
    const resultDiv = document.getElementById('result');
    const timeTakenSpan = document.getElementById('time-taken');
    const differenceSpan = document.getElementById('difference');
    const bestScoreSpan = document.getElementById('best-score');
    const attemptsSpan = document.getElementById('attempts');
    const messageEl = document.getElementById('message');
    const secondHand = document.getElementById('second-hand');
    const ticksGroup = document.getElementById('ticks');
    const targetDurationSpan = document.getElementById('target-duration');
    const levelSpan = document.getElementById('level');

    // V·∫Ω v·∫°ch chia tr√™n ƒë·ªìng h·ªì SVG
    if (ticksGroup.childNodes.length === 0) {
        for (let i = 0; i < 60; i++) {
            const tick = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            const angle = (i * 6) * Math.PI / 180;
            const r1 = 130, r2 = i % 5 === 0 ? 120 : 125;
            const x1 = 150 + r1 * Math.sin(angle);
            const y1 = 150 - r1 * Math.cos(angle);
            const x2 = 150 + r2 * Math.sin(angle);
            const y2 = 150 - r2 * Math.cos(angle);
            tick.setAttribute('x1', x1);
            tick.setAttribute('y1', y1);
            tick.setAttribute('x2', x2);
            tick.setAttribute('y2', y2);
            tick.setAttribute('stroke', '#bbb');
            tick.setAttribute('stroke-width', i % 5 === 0 ? 3 : 1);
            ticksGroup.appendChild(tick);
        }
    }

    let startTime = null;
    let timerInterval = null;
    let attempts = 0;
    let bestScore = Infinity;

    function setLevel(levelIdx) {
        currentLevel = levelIdx;
        targetDurationSpan.textContent = levels[currentLevel].target;
        levelSpan.textContent = currentLevel + 1;
        // Reset kim gi√¢y
        secondHand.setAttribute('transform', 'rotate(0 150 150)');
        resultDiv.classList.add('hidden');
        startBtn.disabled = false;
        stopBtn.disabled = true;
        nextLevelBtn.classList.add('hidden');
        showMessage(`M√†n ${currentLevel + 1}: B·∫•m ƒë√∫ng ${levels[currentLevel].target} gi√¢y!`, 'bg-blue-500');
    }

    function updateSecondHand() {
        if (!startTime) return;
        const elapsed = (Date.now() - startTime) / 1000;
        const degrees = ((elapsed % 60) * 6);
        secondHand.setAttribute('transform', `rotate(${degrees} 150 150)`);
    }

    function startTimer() {
        startTime = Date.now();
        startBtn.disabled = true;
        stopBtn.disabled = false;
        resultDiv.classList.add('hidden');
        timerInterval = setInterval(updateSecondHand, 100);
        showMessage(`ƒê·∫øm ${levels[currentLevel].target} gi√¢y trong ƒë·∫ßu v√† b·∫•m D·ª´ng!`, 'bg-blue-500');
    }

    function stopTimer() {
        const endTime = Date.now();
        const timeTaken = (endTime - startTime) / 1000;
        const difference = Math.abs(timeTaken - levels[currentLevel].target);
        clearInterval(timerInterval);
        startBtn.disabled = false;
        stopBtn.disabled = true;
        attempts++;
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£
        timeTakenSpan.textContent = timeTaken.toFixed(2);
        differenceSpan.textContent = difference.toFixed(2);
        attemptsSpan.textContent = attempts;
        resultDiv.classList.remove('hidden');
        // C·∫≠p nh·∫≠t th√†nh t√≠ch t·ªët nh·∫•t
        if (difference < bestScore) {
            bestScore = difference;
            bestScoreSpan.textContent = difference.toFixed(2) + 's';
        }
        // Hi·ªÉn th·ªã th√¥ng b√°o d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
        if (difference <= levels[currentLevel].allowedError) {
            showMessage('üéâ Ch√≠nh x√°c! B·∫°n ƒë√£ qua m√†n n√†y!', 'bg-green-500');
            if (currentLevel < totalLevels - 1) {
                nextLevelBtn.classList.remove('hidden');
            } else {
                showMessage('üèÜ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ m√†n ch∆°i!', 'bg-green-600');
            }
        } else {
            showMessage('‚è≥ Ch∆∞a chu·∫©n l·∫Øm, th·ª≠ l·∫°i nh√©!\nM·∫πo: H√£y ƒë·∫øm nh·ªãp ƒë·ªÅu "m·ªôt, hai, ba..." ho·∫∑c th·ª≠ c√¥ng th·ª©c: Th·ªùi gian = S·ªë l·∫ßn ƒë·∫øm x 1 gi√¢y!', 'bg-yellow-500');
        }
        // Reset kim gi√¢y v·ªÅ v·ªã tr√≠ 0
        secondHand.setAttribute('transform', 'rotate(0 150 150)');
    }

    function showMessage(text, className) {
        messageEl.textContent = text;
        messageEl.className = `fixed top-4 right-4 p-4 rounded-lg text-white font-bold ${className}`;
        messageEl.classList.remove('hidden');
        setTimeout(() => {
            if (!messageEl.classList.contains('hidden')) {
                messageEl.classList.add('hidden');
            }
        }, 3000);
    }

    startBtn.addEventListener('click', startTimer);
    stopBtn.addEventListener('click', stopTimer);
    nextLevelBtn.addEventListener('click', function() {
        if (currentLevel < totalLevels - 1) {
            currentLevel++;
            localStorage.setItem('precisionTimingLevel', currentLevel);
            setLevel(currentLevel);
        }
    });
    resetGameBtn.addEventListener('click', function() {
        currentLevel = 0;
        localStorage.removeItem('precisionTimingLevel');
        attempts = 0;
        bestScore = Infinity;
        bestScoreSpan.textContent = '-';
        attemptsSpan.textContent = '0';
        setLevel(currentLevel);
    });

    // Kh·ªüi t·∫°o m√†n ƒë·∫ßu ti√™n
    setLevel(currentLevel);
});
</script>
@endsection 